version: '3.8'

services:


  # =================
  # BRICK APPLICATION
  # =================

  app:
    profiles:
      - prod
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    expose:
      - "5173"
    security_opt:
      - no-new-privileges:true
    env_file: docker/brick.env
    environment:
      NODE_ENV: production
      ORIGIN: http://brick.localhost
      PRIVATE_DOCKER_API_URL: http://api:8080
    depends_on:
      - api
    networks:
      - proxy
      - internal
    labels:
      traefik.enable: "true"
      traefik.docker.network: "proxy"
      traefik.http.routers.app.rule: "Host(`brick.localhost`)"
  
  # We keep this as the development image with hot reload for
  # local development running on dev.brick.localhost/
  
  app-dev:
    profiles:
      - dev
    build:
      context: .
      dockerfile: docker/Dockerfile.app.dev
    volumes:
      - ./app:/usr/src/app
      - /usr/src/app/node_modules
    expose:
      - "5174"
    security_opt:
      - no-new-privileges:true
    env_file: docker/brick.env
    environment:
      NODE_ENV: development
      ORIGIN: http://dev.brick.localhost
      PRIVATE_DOCKER_API_URL: http://api-dev:8080
    depends_on:
      - api-dev
    networks:
      - proxy
      - internal
    labels:
      traefik.enable: "true"
      traefik.docker.network: "proxy"
      traefik.http.routers.app-dev.rule: "Host(`dev.brick.localhost`)"


  # ========================
  # BRICK API SERVER AND CLI
  # ========================

  api:
    profiles:
      - prod
    build: 
      context: .
      dockerfile: docker/Dockerfile.server
    command: uvicorn brick.api.main:app --host 0.0.0.0 --port 8080
    volumes:
      - api:/data
      - work:/tmp
      - databases:/data
    env_file: docker/brick.env
    environment:
      CORS_ORIGINS: http://app:5173
      MONGODB_DATABASE: brick
      MONGODB_USERNAME: /run/secrets/brick_db_user
      MONGODB_PASSWORD: /run/secrets/brick_db_pwd
    expose:
      - "8080"
    security_opt:
      - no-new-privileges:true
    depends_on:
      - redis
      - mongodb
      - databases
    secrets:
      - brick_db_user
      - brick_db_pwd
    networks:
      - internal
  
  api-dev:
    profiles:
      - dev
    build: 
      context: .
      dockerfile: docker/Dockerfile.server
    command: uvicorn brick.api.main:app --host 0.0.0.0 --port 8080
    volumes:
      - api_dev:/data
      - work:/tmp
      - databases:/data
    env_file: docker/brick.env
    environment:
      CORS_ORIGINS: http://app-dev:5174
      MONGODB_DATABASE: dev
      MONGODB_USERNAME: /run/secrets/brick_db_user
      MONGODB_PASSWORD: /run/secrets/brick_db_pwd
    expose:
      - "8080"
    security_opt:
      - no-new-privileges:true
    depends_on:
      - redis
      - mongodb
      - databases
    secrets:
      - brick_db_user
      - brick_db_pwd
    networks:
      - internal


  # ==================
  # TASK QUEUE WORKERS
  # ==================

  # Celery workers have access to some API settings
  # and update the session model in the database and therefore
  # need access to the API config and secrets

  worker:
    profiles:
      - prod
    build: 
      context: .
      dockerfile: docker/Dockerfile.server
    command: celery -A brick.api.core.celery.celery_app worker --loglevel=INFO
    volumes:
      - work:/tmp
      - databases:/data
    env_file: docker/brick.env
    environment:
      CORS_ORIGINS: http://app:5173
      MONGODB_DATABASE: brick
      MONGODB_USERNAME: /run/secrets/brick_db_user
      MONGODB_PASSWORD: /run/secrets/brick_db_pwd
    security_opt:
      - no-new-privileges:true
    depends_on:
      - api
      - redis
      - mongodb
      - databases
    secrets:
      - brick_db_user
      - brick_db_pwd
    networks:
      - internal
    deploy:
      resources:
        limits:            # process is killed
          cpus: '8'          # either number of cores or fraction
          memory: 42G
        reservations:      # resources reserved for container
          cpus: '8'
          memory: 20G      # determined by the largest database 

  worker-dev:
    profiles:
      - dev
    build: 
      context: .
      dockerfile: docker/Dockerfile.server
    command: celery -A brick.api.core.celery.celery_app worker --loglevel=INFO
    volumes:
      - work:/tmp
      - databases:/data
    env_file: docker/brick.env
    environment:
      CORS_ORIGINS: http://app-dev:5174
      MONGODB_DATABASE: dev
      MONGODB_USERNAME: /run/secrets/brick_db_user
      MONGODB_PASSWORD: /run/secrets/brick_db_pwd
    security_opt:
      - no-new-privileges:true
    depends_on:
      - api-dev
      - redis
      - mongodb
      - databases
    secrets:
      - brick_db_user
      - brick_db_pwd     
    networks:
      - internal 
    deploy:
      resources:
        limits:            # process is killed
          cpus: '8'          # either number of cores or fraction
          memory: 42G
        reservations:      # resources reserved for container
          cpus: '8'
          memory: 20G      # determined by the largest database 

  # ========= 
  # DATABASES 
  # ========= 

  # Currently using the same Redis (Celery) and MongoDB for
  # dev and and prod (different collections) should probably
  # have their own database stack to ensure non-interference

  redis:
    profiles:
      - prod
      - dev
      - test
    image: redis:7.0.12-alpine
    expose:
      - "6379"
    volumes:
      - redis_db:/data
    security_opt:
      - no-new-privileges:true
    networks:
      - internal

  mongodb:
    profiles:
      - prod
      - dev
      - test
    image: mongo:7.0.0-rc10
    restart: unless-stopped
    command: mongod --auth --quiet --logpath /dev/null
    expose:
      - "27017"
    volumes:
      - mongo_db:/data/db
      - mongo_db_cfg:/data/configdb # will create anonymous volumes otherwise if not specified
      - ./docker/mongodb/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    environment:
      MONGODB_INIT_ROOT_USER_FILE: /run/secrets/mongo_root_user
      MONGODB_INIT_ROOT_PWD_FILE: /run/secrets/mongo_root_pwd
      MONGODB_USERNAME_FILE: /run/secrets/brick_db_user
      MONGODB_PASSWORD_FILE: /run/secrets/brick_db_pwd
    security_opt:
      - no-new-privileges:true
    secrets:
      - mongo_root_user
      - mongo_root_pwd
      - brick_db_user
      - brick_db_pwd
    networks:
      - internal

  # ================
  # DATABASE STORAGE
  # ================

  # Specification of the image tag will cause the 
  # image to not rebuild when using --build. This
  # is intended as we want to update the storage
  # volume with the database manually, rather than
  # downloading on each --build

  databases:
    image: brick-database-storage:latest
    profiles:
      - prod
      - dev
    build: 
      context: .
      dockerfile: docker/Dockerfile.dbs
    tty: true
    volumes:
      - databases:/data  # /data/genomad_db
    networks:
      - internal

  # ================================================
  # DELETES SESSIONS AND UPLOADED FILES PERIODICALLY
  # ================================================

  data-cleaner:
    profiles:
      - server
    build: 
      context: .
      dockerfile: docker/Dockerfile.server
    command: brick utils clean --expire-days 3 --day-of-week '*' --time-of-day '04:00' --log /tmp/brick-cleaner.log
    volumes:
      - api:/data
      - work:/tmp
      # Set the container timezone by sharing the read-only localtime
      - /etc/localtime:/etc/localtime:ro 
    env_file: docker/brick.env
    environment:
      BRICK_API_BASE_URL: http://api:8080
    security_opt:
      - no-new-privileges:true
    depends_on:
      - api
      - redis
      - mongodb
    networks:
      - internal
  
  data-cleaner-dev:
    profiles:
      - server-dev
    build: 
      context: .
      dockerfile: docker/Dockerfile.server
    command: brick utils clean --expire-days 3 --day-of-week '*' --time-of-day '04:00' --log /tmp/brick-cleaner.log
    volumes:
      - api:/data
      - work:/tmp
      # Set the container timezone by sharing the read-only localtime
      - /etc/localtime:/etc/localtime:ro 
    env_file: docker/brick.env
    environment:
      BRICK_API_BASE_URL: http://api-dev:8080
    security_opt:
      - no-new-privileges:true
    depends_on:
      - api-dev
      - redis
      - mongodb
    networks:
      - internal

  # ============
  # UNIT TESTING
  # ============

  tests:
    profiles:
      - test
    build: 
      context: .
      dockerfile: docker/Dockerfile.server
    command: pytest
    environment:
      MONGODB_DATABASE: tests
      MONGODB_USERNAME: /run/secrets/brick_db_user
      MONGODB_PASSWORD: /run/secrets/brick_db_pwd
      WORK_DISK_SPACE_GB: 0.01  # see if this works on runners
    volumes:
      - work:/tmp  # test of disk space (test_utils.py) assumes /tmp
    depends_on:
      - redis
      - mongodb
    secrets:
      - brick_db_user
      - brick_db_pwd
    networks:
      - internal

volumes:
  work:
    driver: local
  api:
    driver: local
  api_dev:
    driver: local
  redis_db:
    driver: local
  mongo_db:
    driver: local
  mongo_db_cfg:
    driver: local
  databases:
    driver: local

secrets:
  mongo_root_user:
    file: ./.secrets/mongo_root_user.txt
  mongo_root_pwd:
    file: ./.secrets/mongo_root_pwd.txt
  brick_db_user:
    file: ./.secrets/brick_db_user.txt
  brick_db_pwd:
    file: ./.secrets/brick_db_pwd.txt
    
networks:
  internal:
  proxy:
    external: true