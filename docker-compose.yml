version: '3.8'

services:

  app:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    restart: unless-stopped
    command: node build
    expose:
      - "5173"
    ports:
      - "5173:5173"
    security_opt:
      - no-new-privileges:true
    env_file: docker/brick.env
    environment:
      ORIGIN: http://localhost:5173
      BODY_SIZE_LIMIT: 20000000
      PUBLIC_BRICK_VERSION: 0.1.0
      PRIVATE_DOCKER_API_URL: "http://api:8080"

  api:
    build: 
      context: .
      dockerfile: docker/Dockerfile.server
    restart: unless-stopped
    command: uvicorn brick.api.main:app --host 0.0.0.0 --port 8080
    volumes:
      - api:/data
      - /tmp:/tmp
    env_file: docker/brick.env
    environment:
      MONGODB_USERNAME: /run/secrets/brick_db_user
      MONGODB_PASSWORD: /run/secrets/brick_db_pwd
    expose:
      - "8080"
    security_opt:
      - no-new-privileges:true
    depends_on:
      - redis
      - mongodb
    secrets:
      - brick_db_user
      - brick_db_pwd

  # Celery workers have access to some API settings
  # and update the session model in the database and therefore
  # need access to the API config and secrets

  worker1:
    build: 
      context: .
      dockerfile: docker/Dockerfile.server
    restart: unless-stopped
    command: celery -A brick.api.core.celery.celery_app worker --loglevel=INFO
    volumes:
      - /tmp:/tmp
    env_file: docker/brick.env
    environment:
      MONGODB_USERNAME: /run/secrets/brick_db_user
      MONGODB_PASSWORD: /run/secrets/brick_db_pwd
    security_opt:
      - no-new-privileges:true
    depends_on:
      - redis
      - mongodb
    secrets:
      - brick_db_user
      - brick_db_pwd
  
  worker2:
    build: 
      context: .
      dockerfile: docker/Dockerfile.server
    restart: unless-stopped
    command: celery -A brick.api.core.celery.celery_app worker --loglevel=INFO
    volumes:
      - /tmp:/tmp
    env_file: docker/brick.env
    environment:
      MONGODB_USERNAME: /run/secrets/brick_db_user
      MONGODB_PASSWORD: /run/secrets/brick_db_pwd
    security_opt:
      - no-new-privileges:true
    depends_on:
      - redis
      - mongodb
    secrets:
      - brick_db_user
      - brick_db_pwd

  redis:
    image: redis:7.0.12-alpine
    restart: unless-stopped
    expose:
      - "6379"
    volumes:
      - redis_db:/data
    security_opt:
      - no-new-privileges:true

  mongodb:
    image: mongo:7.0.0-rc10
    restart: unless-stopped
    command: mongod --auth --quiet --logpath /dev/null
    expose:
      - "27017"
    volumes:
      - mongo_db:/data/db
      - mongo_db_cfg:/data/configdb # will create anonymous volumes otherwise if not specified
      - ./docker/mongodb/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    environment:
      MONGODB_INIT_ROOT_USER_FILE: /run/secrets/mongo_root_user
      MONGODB_INIT_ROOT_PWD_FILE: /run/secrets/mongo_root_pwd
      MONGODB_USERNAME_FILE: /run/secrets/brick_db_user
      MONGODB_PASSWORD_FILE: /run/secrets/brick_db_pwd
    security_opt:
      - no-new-privileges:true
    secrets:
      - mongo_root_user
      - mongo_root_pwd
      - brick_db_user
      - brick_db_pwd


  # ===================================
  # DELETES UPLOADED FILES PERIODICALLY
  # ===================================

  # Defaults to `/tmp` directory if the environment 
  # variable `PROD_BRICK_WORK_DIRECTORY` is not set

  # Careful use of this one, make sure things 
  # are working and BRICK_WORK_DIRECTORY is 
  # properly configured. 

  # Operates only with the `production` profile
  # to run for the web service

  data-cleaner:
    restart: always
    profiles:
      - production
    build:
      context: .
      dockerfile: docker/Dockerfile.cleaner
    env_file: docker/brick.env
    volumes:
      - /tmp:/data:rw

  # ============
  # UNIT TESTING
  # ============

  tests:
    profiles:
      - test
    build: 
      context: .
      dockerfile: docker/Dockerfile.server
    command: pytest
    environment:
      WORK_DISK_SPACE_GB: ${WORK_DISK_SPACE_GB:-0.1}  # testing does not need a lot of disk space
      MONGODB_DATABASE: tests
      MONGODB_USERNAME: /run/secrets/brick_db_user
      MONGODB_PASSWORD: /run/secrets/brick_db_pwd
    volumes:
      - /tmp:/tmp  # test of disk space (test_utils.py) assumes /tmp
    depends_on:
      - redis
      - mongodb
    secrets:
      - brick_db_user
      - brick_db_pwd

volumes:
  api:
    driver: local
  redis_db:
    driver: local
  mongo_db:
    driver: local
  mongo_db_cfg:
    driver: local

secrets:
  mongo_root_user:
    file: ./docker/mongodb/mongo_root_user.txt
  mongo_root_pwd:
    file: ./docker/mongodb/mongo_root_pwd.txt
  brick_db_user:
    file: ./docker/mongodb/brick_db_user.txt
  brick_db_pwd:
    file: ./docker/mongodb/brick_db_pwd.txt